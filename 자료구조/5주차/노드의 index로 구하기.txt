// 연결리스트 순회하기


// 연결리스트의 index번째 노드의 주소 반환
// index가 3이면 4번째 노드를 찾아 이 주소를 반환해준다.

Node *get_node(int index) {
	if (index < 0)
		return NULL;
	Node *p = head;

	// -> 예외적인 경우때문에 p!=NULL 이라는 조건을 추가해준다.
	// 노드는 5개인데 index가 6이나 7인 경우

	for (int i = 0; i < index&&p != NULL; i++) ]
		p = p->next;
	return p;
}

// 연결리스트의 index번째 위치에 새로운 노드를 만들어서 삽입하기
// 맨 앞인 경우, 그렇지 않은 경우로 나누어 처리한다.

int add(int index, char *item) { 
	// 성공했을 때는 1, 실패했을 때는 0
	if (index < 0)
		return 0;

	if (index == 0) { // 맨처음에 넣으라는 것
		add_first(item);
		reutrn 1;
	}

	Node *prev = get_node(index - 1); 
	// 삽입은 prev를 주고 그 다음에 하는 것이기 때문에, 삽입할 그 바로 앞 노드의 주소를 리턴해준다.
	if (prev != NULL) {
		add_after(prev, item);
		reutrn 1;
	}
	return 0;
}

// index번째 노드를 삭제하고, 그 노드에 저장된 데이터를 반환한다.

Node *remove(int index) {
	if (index < 0) {
		return NULL;
	}
	if (index == 0) {
		return remove_first();
	}
	Node *prev = get_node(index - 1); // 삭제할 노드 바로 앞 노드의 주소를 리턴해준다.
	if (prev == NULL)
		return NULL;
	else {
		return remove_after(prev); // remove가 주소를 리턴해주는 거니까, 주소를 받아 고대로 리턴해준다.
	}
}

// 입력된 스트링을 저장한 노드를 찾아 삭제한다.
// 삭제된 노드에 저장된 스트링을 반환한다. -> 주소를 반환한다.

Node *remove(char *item) {
	Node *p = head;
	while (p != NULL&&strcmp(p->data, item) != 0) // 찾는 데이터가 나올 때까지 !
		p = p -> next;

	// 정작 중요한 건 이 앞의 주소가 필요한 것이다...
	// while은 딱 그 데이터의 주소를 알려주기 때문에 좀 난감하다 !!
}

// 해결해주기 위해서는 포인터를 두개 쓴다.

Node *remove(char * item) {
	Node *p = head;
	Node *q = NULL;

	while (p != NULL&&strcmp(p->data, item) != 0) {
		q = p; // q는 항상 p의 한칸뒤를 따라간다.
		p = p->next; // p는 항상 전진한다. 
	}
	if (p == NULL) // 찾는 게 없다.
		return NULL;

	if (q == NULL) // q가 NULL 이라는 얘기는 p가 가리키는게 첫번째 (head) 라는 뜻이다 !!!
		return remove_first();
	else
		return remove_after(q);
}

// 연결리스트에 데이터들이 오름차순으로 정렬되어있다는 가정하에서 데이터를 삽입한다.

void add_to_ordered_list(char *item) {
	Node *p = head;
	Node *q = NULL;
	
	// 원래는 요일순 ... !!! 근데 여기는 그냥 문자순으로 했었당...
	// 처음으로 나보다 큰 값이 나타나면 그 중간에 내가 들어가야 한다 ! ! !
	// 다시,,, 단어로 생각하자 
	// A B F G 에서 D 를 넣을 때,
	// 처음으로 D 보다 큰 값이 나오면 그 앞에 들어가야 한다 ! ! ! 
	while (p != NULL&&strcmp(p->data, item) <= 0) {
		q = p;
		p = p->next;
	}
	// 더 크게 되면 빠져나오게 된다.
	// p가 F를 가리키는 상태로 나오게 된다. 
	// add_after는 있지만 add_before은 없으므로 그 앞의 노드를(노드의 주소를) 가리켜야 한다.
	// 그러므로 아까와 같이 q도 다시 만들어준다 !!!
	if (q == NULL) {
		add_first(item);
	}
	else
		add_after(q);
}