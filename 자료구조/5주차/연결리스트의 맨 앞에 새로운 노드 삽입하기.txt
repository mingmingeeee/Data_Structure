#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 연결리스트의 맨 앞에 새로운 노드 삽입하기

/*
1. 새로운 노드를 만들고 추가할 데이터 저장
2. 새로운 노드의 next 핃르가 현재의 head 노드 가리키도록
3. head가 새로운 노드를 가리키도록
*/

struct node {
	char *data;

	struct node *next;
};

typedef struct node Node;
Node *head = NULL;

int main() {

	Node * tmp = (Node *)malloc(sizeof(Node));
	tmp->data = "Ann";
	tmp->next = head;
	head = tmp;

}

// 코드가 일반적인 경우만이 아니라 특수한 경우에도 문제 없이 작동하는지 확인해야 한다. 
// head의 값이 NULL 이라면 어떨까 ??????? 확인해야 한다 !!! -> 연결리스트의 길이가 0인 경우에 !!! 

// 함수로 만들기

void add_first(char *item) 
{
	Node *temp = (Node *)malloc(sizeof(Node));
	tmep->data = item;
	temp->next = head;
	head = temp;
}

// head가 전역변수라면, add_first 안에서 작동되게 할 수 있다. -> head가 전역변수여야 문제없이 구현될 수 있다 !!!
// 전역변수가 아니라면, Node *head를 변수로 받아서 사용하면 되는데,
// 문제가 있다....
// 매개변수에 의한 호출이 값에 의한 호출이기 때문에
// 네번째 줄에서 문제가 생긴다. 
// 네번째 줄이 맨 앞에 새로운 문자를 추가하는 거라 head가 바껴야 하는데,
// head가 호출한 곳에서의 지역변수이니까 void에서 바꾸더라도 
// 호출한 곳에서의 지역변수라서 바뀌지는 않는다. 


// 그래도 매개변수로 넘기고 싶다면,
// 이렇게 구현할 경우 이 함수는 add_first(&head, item_to_stre);
void add_first(Node **ptr_head, char *item) // head 노드의 값이 아닌 주소를 넘겨준다. 
{
	Node *temo = (Node *)malloc(sizeof(Node));
	temp->data = item;
	temp->next = *ptr_head;
	*ptr_head = temp;
}

// 매개변수로 넘기는 두번째 방법
// add_first가 변경된 주소의 값을 리턴하도록 만들기도 한다.
Node *add_first(Node *head, char *item)
{
	Node *temp = (Node *)malloc(sizeof(Node));
	temp->data = item;
	temp->next = head;
	return temp; // head를 리턴하는 것은 아무 의미 없다 !!! 지역변수이기 때문이다.
}