#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 연결리스트 어떤 노드 뒤에 새로운 노드 삽입하기

/*
1. 새로운 노드를 만들고 데이터를 저장
2. 새로운 노드의 next 필드가 prev의 다음 노드를 가리키도록
3. 새로운 노드를 prev의 다음 노드로 만듬
*/

// 뒤에 있는 노드 하나 만드는 과정
Node *tmp = (Node *)malloc(sizeof(Node));
tmp->data = data_to_store;
tmp->next = prev->next;
prev->next = tmp;

// 함수로

int add_after(Node *prev, char *item)
{
	if (prev == NULL)
		return 0;

	Node *tmo = (Node *)malloc(sizeof(Node));
	tmp->data = item;
	tmp->next = prev->net;
	prev->next = tmp;

	return 1;
}

// 삽입에 성공하면 1, 아니면 0을 반환한다. 

// 삽입하기 위해서는 앞 노드의 주소가 필요한데, 이는 간단하지 않다.
// 그러므로 insert_before에 대해서는 잘 말하지는 않는다. 

// 첫번째 노드의 삭제
// head가 현재 head 노드 다음 노드를 가리키게 만든다. -> 원래 head는 연결리스트를 빠져나가는 것이다.
head = head->next;

// 함수로, head는 전역변수 !!!

Node * remove_first() {
	if (head == NULL) {
		return NULL;
	}
	else {
		Node *tmp = head; // 현재 head 주소 리턴해주기 위해 잠깐 저장함
		head = head->next;
		return tmp; // 리턴해줌 -> 삭제 되어서 없어진다면 free 해주어야 한다 !!!
	}
}

// 필요 없어진 malloc은 꼭 꼭 꼭 free 해주어야 한다 !!!

// 어떤 노드의 다음 노드 삭제하기
// 삭제당할 앞 노드의 주소가 더 중요하다 !!!!!!!!!!
// 이 전 앞노드가 삭제되는 노드 다음을 가리키면 됨

if (prev->next != NULL)
	prev->next = prev->next->next;

//prev의 next노드의 next필드

Node *remove_after(Node *prev) {
	Node *tmp = prev->next;
	if (tmp == NULL) {
		return NULL;
	}
	else {
		prev->next = tmp->next;
		return tmp;
	}
}

// 연결리스트 순회하기
// -> 처음부터 순서대로 방문하는 것

Node *find(char *word) {
	Node *p = head; // 첫번 째 노드 가리키도록
	while (p != NULL) {
		if (strcmp(p->data, word) == 0)
			return p; // 찾았당 !!! 이 때의 주소 리턴하기
		p = p->next; // 못찾았다면, 그 다음의 주소로 가기
	}
	return NULL; // 원하는 것 찾지 못해서 리턴 NULL 하기
}