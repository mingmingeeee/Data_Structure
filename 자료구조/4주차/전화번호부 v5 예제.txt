// 구조체의 배열은 간편하게 작성할 수 있으나 복사되어야 하는 수가 많다
// 그렇다면 어떻게 하는 게 더 나을까?
// 구조체의 포인터를 사용해보자

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define INIT_CAPACITY 100
#define BUFFER_LENGTH 100

typedef struct person {
	char *name;
	char *number;
	char *email;
	char *group;
} Person;

Person ** directory; 
// 배열 재할당 -> 동적 메모리 할당을 위해 배열이 아닌 포인터 사용

void reallocate();

int capacity;
int n;

void init() {
	directory = (Person **)malloc(INIT_CAPACITY * sizeof(Person*));
	// 안에 있는 것이 Person* 이므로 * INIT_CAPACITY 이다
	// 그리고 당연히 자료형은 Person** 이다
	capacity = INIT_CAPACITY;
	n = 0;
}

void load(char *fileName) {
	char buffer[BUFFER_LENGTH];
	char *name, *number, *email, *group;
	char *token;
	FILE *fp = fopen(fileName, "r");
	if (fp == NULL) {
		printf("Open failed.\n");
		return;
	}

	while (1) {
		if (read_line(fp, buffer, BUFFER_LENGTH) <= 0)
			break;
		name = strtok(buffer, "#"); // name 을 바로 저장
		token = strtok(NULL, "#"); // number
		if (strcmp(token, " ") == 0)
			number = NULL; // 공백이 아닌 NULL로
		else
			number = strdup(token);
		token = strtok(NULL, "#");
		if (strcmp(token, " ") == 0)
			email = NULL;
		else
			email = strdup(token);
		token = strtok(NULL, "#");
		if (stricmp(token, " ") == 0)
			group = NULL;
		else
			group = strdup(token);
		add(strdup(name), number, email, group);
	}
	fclose(fp);
}

void add(char *name, char * number, char *email, char *group) {
	if (n >= capacity) // n이 배열 초기값보다 크다면
		reallocate(); // 배열이 꽉 찼으므로 새로운 사람들 추가할 수 있게 늘려줌

	int i = n - 1;
	while (i >= 0 && strcmp(directory[i]->name, name) > 0) {
		directory[i + 1] = directory[i];
		i--;
	}

	directory[i + 1] = (Person *)malloc(sizeof(Person));
	// 구조체의 배열이 아닌 구조체의 포인터이므로
	// 뒤로 보낸다는 뜻은 가리키는 것들이 다음 칸으로 갔다는 말
	// 비어있으니 추가하려면 구조체 객체를 하나 만들어서
	// 새로운 것을 저장할 구조체 객체를 만들고
	// 그 곳에 주소를 할당해야 한다 !!!!!!!!!

	directory[i + 1]->name = name;
	directory[i + 1]->number = number;
	directory[i + 1]->email = email;
	directory[i + 1]->group = group;
	n++;
}

void reallocate() {
	capacity *= 2; // 두배로 늘림
	Person **tmp = (Person**)malloc(capacity * sizeof(Person *));;

	for (int i = 0; i < n; i++)
		tmp[i] = directory[i];
	free(directory); // 원래 있던 directory는 garbage가 되니 없애주자 !!!
	directory = tmp; // 그리고 tmp의 주소를 다시 directory가 가리키게 하자 !!!
	// tmp의 주소가 directory로 바뀌게 하는 것
}

void remove(char *name) {
	int i = search(name);
	if (i == -1) {
		printf("No person named '%s' exists.\n", name);
		return;
	}

	Person *p = directory[i];
	for (int j = i; j < n - 1; j++)
		directory[j] = directory[j + 1];
	n--;
	release_person(p);
	printf("'%s' was deleted successfully. \n", name);
}

// malloc으로 할당된 메모리는 필요없어지면 꼭 꼭 꼭 !!! free 시켜줘라 ! ! !
// p 안에 있는 문자열들에는 strdup를 썼고
// 이 strdup에서도 malloc을 써서 할당한다.
// 그러므로 구조체뿐만 아닌 문자열들도 모두 free시켜주어야 한다! ! !

void release_person(Person *p) {
	// 일단 문자열들 모두 free
	// but 안에 있는 것이 NULL이라면 free시킬 필요 없으므로
	// NULL이 아닌 경우에만 free
	free(p->name);
	if (p->number != NULL) free(p->number);
	if (p->email != NULL) free(p->email);
	if (p->group != NULL) free(p->group);
	free(p); // 마지막에 p free
}