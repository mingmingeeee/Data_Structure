#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define CAPACITY 100
#define BUFFER_LENGTH 100

/* 한 사람에 붙어다녀야 할 것이 여러개이기 때문에 구조체를 사용한다 */
/* 배열이 많아지기 때문에 구조체 사용 !!!!! */

typedef struct person { // 그냥 타입명이 typedef # 타입명이 붙은 경우에는 person 생략해도 됨
	char *name;
	char *number;
	char *email;
	char *group;
}Person;

Person directory[CAPACITY]; // 배열 directory 설정

void add(char *name, char *number, char *email, char *group);
int read_line(FILE * fp, char str[], int n);
void load(char *fileName);
int compose_name(char str[], int limit);
void handle_add(char * name);
void save(char*fileName); 
void remove(char *name); 
void print_person(Person p); 
int search(char *name);
void status(); 
void find(char *name);

int n = 0;

int main() {

	char command_line[BUFFER_LENGTH]; // 명령어
	char *command, *argument;
	char name_str[BUFFER_LENGTH];

	while (1) {
		printf("$ ");
		if (read_line(stdin, command_line, BUFFER_LENGTH) <= 0)// stdin: stadard input file 줄임 -> 키보드로 입력
			continue;

		command = strtok(command_line, " ");

		if (strcmp(command, "read") == 0) { // read 일 때는 뒤에 파일이름이 나와야 함
			argument = strtok(NULL, " ");
			if (argument == NULL) { // 파일 이름 제공 ?!
				printf("Invalid arguments.\n");
				continue;
			}
			load(argument);
		}
		else if (strcmp(command, "add") == 0) { // add 다음에는 단어가 여러개 나올 수 있다
			// 단어가 여러개 나올 때 공백이 여러개가 있다면, 그 공백을 단 하나의 공백으로 저장한다
			if (compose_name(name_str, BUFFER_LENGTH) <= 0) { // compose_name 불필요한 공백 제거
				printf("Name required.\n"); // 이름이 필요행 ~~ 
				continue;
			}
			handle_add(name_str);
		}
		else if (strcmp(command, "find") == 0) {
			if (compose_name(name_str, BUFFER_LENGTH) <= 0) {
				printf("Name required.\n");
				continue;
			}
			find(name_str);
		}
		else if (strcmp(command, "status") == 0) {
			status();
		}
		else if (strcmp(command, "delete") == 0) {
			if (compose_name(name_str, BUFFER_LENGTH) <= 0) {
				printf("Invalid arguments.\n");
				continue;
			}
			remove(name_str);
		}
		else if (strcmp(command, "save") == 0) {
			argument = strtok(NULL, " ");
			if (argument == NULL) {
				printf("Invalid arguments.\n");
				continue;
			}
			else if (strcmp(argument, "as") != 0) {
				printf("Invalid arguments.\n");
				continue;
			}
			argument = strtok(NULL, " ");
			if (argument == NULL) {
				printf("Invalid arguments.\n");
				continue;
			}
			save(argument);
		}
		else if (strcmp(command, "exit") == 0)
			break;
	}
	return 0;
}

int read_line(FILE * fp, char str[], int n) {
	// datafile로부터 load할 때 한 라인 단위로 읽은 다음에 
	// #으로 토크나이징 할 것
	// 키보드만이 아니라 파일로부터도 읽을 수 있도록
	// FILE 포인터 : datafile로부터 읽을 건지 아니면 키보드로부터 읽을 건지
	int ch, i = 0;

	while ((ch = fgetc(fp)) != '\n'&&ch != EOF) // fgetc : file로부터 읽은 것 + file의 마지막에는 줄바꿈이 없으므로 EOF이기 전까지 읽어라! 라는 조건을 추가해줌
		if (i < n)
			str[i++] = ch;

	str[i] = '\0';
	return i;
}

void load(char *fileName) {

	char buffer[BUFFER_LENGTH];
	char * name, *number, *email, *group;

	FILE *fp = fopen(fileName, "r");
	if (fp == NULL) {
		printf("Open failed.\n");
		return;
	}

	while (1) {
		if (read_line(fp, buffer, BUFFER_LENGTH) <= 0)
			break;
		name = strtok(buffer, "#");
		number = strtok(NULL, "#");
		email = strtok(NULL, "#");
		group = strtok(NULL, "#");
		add(name, number, email, group);
	}
	fclose(fp);
}

void add(char *name, char *number, char *email, char *group) {
	int i = n - 1;
	while (i >= 0 && strcmp(directory[i].name, name) > 0) {
		directory[i + 1] = directory[i]; // 구조체이므로 자체들을 변환시킬 수 있음
		i--;
	}

	directory[i + 1].name = strdup(name);
	directory[i + 1].number = strdup(number); 
	directory[i + 1].email = strdup(email);
	directory[i + 1].group = strdup(group);
	// 없는 항목일 경우에는 하나의 공백문자로 저장된다고 기억!
	n++;
}
	
int compose_name(char str[], int limit) {
	// 사람 이름의 length를 리턴해줌
	char * ptr;
	int length = 0; // 이름의 길이 

	ptr = strtok(NULL, " ");
	// 이름이 없다면
	if (ptr == NULL) 
		return 0;

	strcpy(str, ptr); // 첫번째 단어 복사
	length += strlen(ptr); 

	while ((ptr = strtok(NULL, " ")) != NULL) { // 문장의 끝에 도달할 때 까지
		if (length + strlen(ptr) + 1 < limit) { // 오버플로우 방지
			// +1 은 끝에 널 캐릭터를 주기 위해 더하기 함
			str[length++] = ' ';
			str[length] = '\0'; // 공백문자로 바꾸고 널캐릭터를 써줘야지만 strcat를 쓸 수 있음 !!!
			strcat(str, ptr); // 두 단어가 널캐릭터로 끝난다는 가정에서만 strcat를 쓸 수 있음
			length += strlen(ptr);
		}
	}
	return length;
}

void handle_add(char * name) {
	char number[BUFFER_LENGTH], email[BUFFER_LENGTH], group[BUFFER_LENGTH];
	char empty[] = " ";

	printf("	Phone: "); // 엔터치는 -> 안에 무엇이 없을 때를 위해
	read_line(stdin, number, BUFFER_LENGTH);

	printf("	Email: ");
	read_line(stdin, email,BUFFER_LENGTH);

	printf("	Group: ");
	read_line(stdin, group, BUFFER_LENGTH);

	add(name, (char *)(strlen(number) > 0 ? number : empty),
			  (char *)(strlen(email) > 0 ? email : empty),
			  (char *)(strlen(group) > 0 ? group : empty));
	// (strlen(number) > 0 ? number : empty)
	// 조건이 만족되면 앞의 것을 택하고 만족되지 않으면 뒤의 것을 택하라
	// 컴파일 되지 않을 때를 대비하여 형에 맞게 char * 로 형변환 시켜줌
}

void save(char*fileName) {
	int i;
	FILE *fp = fopen(fileName, "w");
	if (fp == NULL) {
		printf("Open failed.\n");
		return;
	}

	for (i = 0; i < n; i++) {
		fprintf(fp, "%s#", directory[i].name);
		fprintf(fp, "%s#", directory[i].number);
		fprintf(fp, "%s#", directory[i].email);
		fprintf(fp, "%s#", directory[i].group);
	}
	fclose(fp);
}

int search(char *name) {
	int i;
	for (i = 0; i < n; i++) {
		if (strcmp(name, directory[i].name) == 0) {
			return i;
		}
	}
	return -1;
}

void print_person(Person p) {
	printf("%s:\n", p.name);
	printf("	Phone: %s\n", p.number);
	printf("	Email: %s\n", p.email);
	printf("	Group: %s\n", p.group);
}

void remove(char *name) {
	int i = search(name);
	if (i == -1) {
		printf("No person named '%s' exists.\n", name);
		return;
	}
	int j = i;
	for (; j < n - 1; j++) {
		directory[j] = directory[j + 1]; 
		// 구조체 변수간의 치환연산이 지원되므로 멤버 항목들을 따로 따로 치환할 필요가 없다.
	}
	n--;
	printf("'%s'was deleted successfully. \n", name);
}

void status() {
	int i;
	for (i = 0; i < n; i++)
		print_person(directory[i]);
	printf("Total %d persons.\n", n);
}

void find(char *name) {
	int index = search(name);
	if (index == -1)
		printf("No person named '%s' exists.\n", name);
	else
		print_person(directory[index]);
}

---------파일 내용---------

David K.#0517778888# #Friend#
Hong Gil-Dong# #henry@gmail.com# #
John Doe# # # #
Sean#01067356574#sean@naver.com#colleague#
