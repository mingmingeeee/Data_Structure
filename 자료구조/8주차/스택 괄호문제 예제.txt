/*
push -> 삽입
pop -> 스택top에 있는 것 꺼내고 반환

-----------기본 연산

peek -> 제거는 하지 않고 반환 그 위에 뭐가 있는 지 알고 싶을 때
empty -> 스택 비었는지 검사 (비어있다면 pop이나 peek할 수 없음)
*/

/*
1. 괄호 검사 문제
(1) 여는 괄호와 다른 괄호의 개수가 같아야 한다 -> 부족,,순서도 같아야 행,,
(2) 스택 이용하여 검사
여는 괄호는 스택에 push
닫는 괄호가 나오면 pop한 후 같은 유형이어야 함
마지막에 스택에 남는 괄호 없어야 함
*/

#include <stdio.h>
#include <string.h>
#include "stack.h"

#define MAX_LENGTH 100

char OPEN[] = "([{";
char CLOSE[] = ")]}";

int is_balanced(char *expr);
int is_open(char ch);
int is_close(char ch);

int main() {
	char expr[MAX_LENGTH];
	scanf("%s", expr);
	if (is_balanced(expr))
		printf("%s:balanced.\n", expr);
	else
		printf("%s:unbalance.\n", expr);
}

int is_balanced(char *expr) {
	int balanced = 1; // 수식이 올바른 지 아닌 지를 검사
	int index = 0;
	while (balanced&&index < strlen(expr)) {
		char ch = expr[index];
		if (is_open(ch) > -1)		// 여는 괄호인지 검사
			push(ch);	// 스택에 추가
		else if (is_close(ch) > -1) {	// 닫는 괄호인지 검사
			if (is_empty()) { // 주의 !!! -> 스택이 비었다면 pop이나 peek할 수 없으므로 먼저, 비었는지 검사
				balanced = 0;
				break;
			}
			char top_ch = pop();	// 닫는 괄호가 나오면 스택에서 pop
			if (is_open(top_ch) != is_close(ch)) {
				balanced = 0;	// 인덱스 다르면 올바른 것이 아닌 것
			} // 같은 유형인지 검사
		}
		index++;
	}
	return(balanced == 1 && is_empty() == 1);
}

int is_close(char ch) {
	for (int i = 0; i < strlen(CLOSE); i++) {
		if (CLOSE[i] == ch)		// CLOSE와 같으면 i 리턴
			return i;
	}
	return -1;
}

int is_open(char ch) {
	for (int i = 0; i < strlen(OPEN); i++) // OPEN에 있는 각각의 문자와 같으면 i 리턴
		if (OPEN[i] == ch)
			return i;
	return -1;
}