1번

// strncmp 함수 -> 그 길이까지만 비교
// memset 함수 -> 배열 초기화
// atof (더블형) 함수, atoi ( 함수 -> 숫자로 바꾸는 함수 )
// 입력 예 : “saf d12shg+^&sh9h df+-()04 123sd” 

#include <stdio.h>
#include <string.h>

#define SIZE 100

int main() {

	char s[SIZE];

	fgets(s, SIZE, stdin);

	int N = 0, n = 0, count = 0;
	int sum = 0;
	int b = 0;
	for (int i = 0; i < strlen(s); i++) {
		if (s[i] >= '0' && s[i] <= '9') {
			if (b > 0 && n == 2) printf("+"); 
			N = N * 10 + s[i] - '0';
			n = 1;
			count++;
		}
		else {
			if (n == 1) { printf("%d", N); b = 1; }
			sum += N;
			N = 0;
			n = 2;
		}
	}

	printf("=%d", sum);

}

2번

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h> // white space 문자인지 검사하는 isspace 함수를 제공

#define CAPACITY 100
#define BUFFER_SIZE 100

/*
add : 새로운 사람 추가

load : 전화번호부 데이터 파일에 저장된 것을 읽어옴

find : 이름으로 전화번호 검색

status : 현재 전화번호부에 저장된 모든 사람 출력

delete : 전화번호부에서 삭제

save : 파일에 저장 -> 처음과 다른 파일에 저장하면 그 별도의 파일에 덮어쓰게 됨

exit : 전화번호부 프로그램 종료
*/

/*
directory.txt 파일에 저장
*/



char * names[CAPACITY];		/* names */
char * numbers[CAPACITY];	/* phone numbers 051-234-6787 */
int n = 0;					/* number of people in phone directory */

void add();
void find();
void status();
void remove();
void save();
void load();
int search(char *name);
void findall();
void deleteall();
void Delete(char *buf);

int main() {
	char command[BUFFER_SIZE];
	while (1) {
		printf("$ ");
		scanf("%s", command);

		if (strcmp(command, "read") == 0)
			load();
		else if (strcmp(command, "add") == 0) // strcmp함수는 두 문자열이 동일하면 0을 반환한다.
			add();
		else if (strcmp(command, "find") == 0)
			find();
		else if (strcmp(command, "status") == 0)
			status();
		else if (strcmp(command, "delete") == 0)
			remove();
		else if (strcmp(command, "save") == 0)
			save();
		else if (strcmp(command, "findall") == 0)
			findall();
		else if (strcmp(command, "deleteall") == 0)
			deleteall();
		else if (strcmp(command, "exit") == 0)
			break;
	}
	return 0;
}

void add() {
	char buf1[BUFFER_SIZE], buf2[BUFFER_SIZE];
	scanf("%s", buf1);
	scanf("%s", buf2);

	int i = n - 1;
	while (i >= 0 && strcmp(names[i], buf1) > 0) { // buf1이 names[i]보다 크면 음수를, 작으면 양수를 반환함
		names[i + 1] = names[i];
		numbers[i + 1] = numbers[i];
		i--;
	}
	names[i + 1] = strdup(buf1);
	names[i + 1] = strdup(buf2);
	n++;
	printf("%s was added succeefully. \n", buf1);
}

void find() {
	char buf[BUFFER_SIZE];
	scanf("%s", buf);

	int index = search(buf);
	if (index == -1)
		printf("No person named '%s' exists.\n", buf);
	else
		printf("%s\n", numbers[index]);
}


void status() {
	int i;
	for (i = 0; i < n; i++)
		printf("%s	%s\n", names[i], numbers[i]);
	printf("Total %d persons/ \n", n);
}

void remove() {
	char buf[BUFFER_SIZE];
	scanf("%s", buf);

	int index = search(buf); /* returns -1 if not exists */
	if (index == -1) {
		printf("No person named '%s' exists. \n", buf);
		return;
	}
	int j = index;
	for (; j < n - 1; j++) { // n-1보다 작은 이유는 j+1 떄문이다. 중요 !!!!!!!!!
		names[j] = names[j + 1];
		numbers[j] = numbers[j + 1];
	}
	n--;
}

void load() {
	char fileName[BUFFER_SIZE];
	char buf1[BUFFER_SIZE];
	char buf2[BUFFER_SIZE];

	scanf("%s", fileName);

	FILE *fp = fopen(fileName, "r");
	if (fp == NULL) { // 파일을 여는데 실패한 것
		printf("Open failed.\n");
		return;
	}

	// 파일 포인터, 포맷스트링, 진짜 읽어올 변수
	while ((fscanf(fp, "%s", buf1) != EOF)) { //이름 읽음
		fscanf(fp, "%s", buf2); //전화번호 읽음
		names[n] = strdup(buf1);
		numbers[n] = strdup(buf2);
		n++;
	}
	fclose(fp);
}

void save() {
	int i;
	char fileName[BUFFER_SIZE];
	char tmp[BUFFER_SIZE];

	scanf("%s", tmp);		// as
	scanf("%s", fileName);	// save할 파일 이름

	FILE *fp = fopen(fileName, "w");
	if (fp == NULL) {
		printf("Open failed.\n");
		return;
		// 원래는 없으면 만들어줌
	}
	for (i = 0; i < n; i++) {
		fprintf(fp, "%s %s\n", names[i], numbers[i]);
	}
	fclose(fp);
}

int search(char *name) {
	int i;
	for (i = 0; i < n; i++) {
		if (strcmp(name, names[i]) == 0) {
			return i;
		}
	}
	return -1;
}

void findall() {
	/*
	내가 하고 싶은 것

	Jo 라는 문자열을 입력하면
	John
	Jonathan 
	이 둘이 찾아졌으면 함

	일단 찾으려면

	for문으로 검색해서

	Jo 이 만큼의 length 만 잘라서 앞에서부터 비교함
	맞으면 출력함
	*/

	char buf[BUFFER_SIZE];
	scanf("%s", buf);

	int count = 0;
	for (int i = 0; i < n; i++) {
		int buf_length = 0;
		for (int j = 0; j < strlen(buf); j++) {
			if (buf[j] == names[i][j]) {
				buf_length++;
				if (buf_length == strlen(buf)) {
					printf("%s %s\n", names[i], numbers[i]);
					count++; break;
				}
			}
		}
	}
	printf("%d persons found.\n", count);

	// for문 한 번으로 해결하는 방법은 없나 ??? ... 
}

void deleteall() {

	char buf[BUFFER_SIZE];
	scanf("%s", buf);

	char reply[BUFFER_SIZE];
	char yes[] = "yes";
	
	int count = 0;
	int check = 0;
	for (int i = 0; i < n; ) {
		int buf_length = 0;
		for (int j = 0; j < strlen(buf); j++) {
			if (buf[j] == names[i][j]) {
				buf_length++;
				if (buf_length == strlen(buf)) {
					printf("Do you want to delete '%s'?\n", names[i]);
					scanf("%s", &reply);
					if (strcmp(reply, yes) == 0) {
						Delete(names[i]);
						check = 1;
						count++;
					}
					else
						check = 0;
					break;
				}
			}
		}
		if (check == 0)
			i++;
	}

	printf("%d persons deleted.\n", count);

}

void Delete(char *buf) {

	int index = search(buf); /* returns -1 if not exists */
	if (index == -1) {
		printf("No person named '%s' exists. \n", buf);
		return;
	}
	int j = index;
	for (; j < n - 1; j++) { // n-1보다 작은 이유는 j+1 떄문이다. 중요 !!!!!!!!!
		names[j] = names[j + 1];
		numbers[j] = numbers[j + 1];
	}
	n--;
}

3번
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {

	char word[100];
	char HARRY[100];

	FILE * in_fp = fopen("harry.txt", "r");
	FILE * out_fp = fopen("aligned.txt", "w");

	int count_ = 0;
	while (fscanf(in_fp, "%s", word) != EOF) {

		if (count_ > 0) {

			if (strlen(HARRY) <= 80 - strlen(word)) {
				strcat(HARRY, word);
				strcat(HARRY, " ");
			}

			else {
				char ch;
				int sum = strlen(HARRY) - 1;

				if (HARRY[79] != ' ' && strlen(HARRY) == 80) 
					ch = HARRY[sum]; 
				else if (strlen(HARRY) <= 80) 
					ch = HARRY[sum - 1]; 

				if (strlen(HARRY) == 80) 
					HARRY[80] = '\0'; 

				else {
					for (int i = strlen(HARRY) - 1; i <= 80; i++)
						if (i == 80)
							HARRY[i] = '\0';
						else
							HARRY[i] = '*';
				}


				int TEST = 1;
				int space_len = 2;

				while (sum < 80) {

					for (int j = 0; j < 81; ) {

						if (HARRY[79] == ch) { TEST = 0; break; }

						if (isspace(HARRY[j])) {
							for (int i = 79; i > j + 1; i--)
								HARRY[i] = HARRY[i - 1];

							HARRY[j + 1] = ' ';
							j += space_len;
							sum++;
						}

						else j++;
					}
					space_len++;
					if (TEST == 0) break;
				}

				fprintf(out_fp, "%s\n", HARRY);
				strcpy(HARRY, word);
				strcat(HARRY, " ");
			}
		}

		if (count_ == 0) {
			strcpy(HARRY, word);
			strcat(HARRY, " ");
			count_++;
		}

	}
	fprintf(out_fp, "%s", HARRY);

	fclose(in_fp);
	fclose(out_fp);
}