#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define INIT_CAPACITY 3 /* 배열 재할당을 테스트하기 위해서 일부러 아주 작은 값으로 */
#define BUFFER_SIZE 50

/* 잘못된 명령어에 대해서 적절히 반응하는 프로그램 만들기 !!!! */

char ** names;
char ** numbers;

int capacity = INIT_CAPACITY;	/* size of arrays */
int n = 0;						/* number of peopple in phone directory */

char delim[] = " ";

void add(char *, char *); //
void find(char *); //
void status(); //
void remove(char *); //
void save(char *); //
void load(char *); //
int search(char * name); //
void reallocate();
void init_directory();
int read_line(char str[], int limit);
void process_command();

int main() {

	init_directory();
	process_command();
}
void init_directory() {
	// 배열의 한 칸에 char * 의 크기만큼을 저장할 것임
	// 세칸 짜리를 만들어보쟝 일단 !!!!!!
	names = (char **)malloc(INIT_CAPACITY * sizeof(char *));
	numbers = (char **)malloc(INIT_CAPACITY * sizeof(char *));
}

// 한 줄을 통째로 읽어온 다음에 이게 제대로 된 명령어인지 아닌지 판단함
int read_line(char str[], int limit) {
	// 사용자가 엔터를 칠 때까지의 입력을 입력받아, str에 저장함
	// limit은 str의 크기임. -> 최대 용량이 limit이기 때문에 더 클 수 없으니, 그 길이를 제한해주기 위해
	int ch, i = 0;
	while ((ch = getchar()) != '\n') {
		// getchar : 한 문자를 입력받는데, 리턴값은 정수임 -> 그로므로 자료형이 int 이다.
		if (i < limit - 1)
			str[i++] = ch;
	}
	// && 으로 묶어버린다면, 나중에 다시 호출했을 때 그 다음 줄을 읽지 않고 
	// 그냥 아까 읽고 남은 곳부터 읽어버림
	str[i] = '\0'; // 문자열을 널 캐릭터로 끝내쟝 그러기 위해 한 칸 여유를 둔 것 ! ! !

	return i; // 실제로 읽은 문자수 반환
}

// 통째로 받아본 다음, 문자들을 잘라서 비교해봄
void process_command() {
	char command_line[BUFFER_SIZE];
	char *command, *argument1, *argument2;

	while (1) {
		printf("$ ");

		//아무 명령이 없을 때
		if (read_line(command_line, BUFFER_SIZE) <= 0)
				continue;
		command = strtok(command_line, delim);
		if (command == NULL)	continue;

		if (strcmp(command, "read") == 0) {
			argument1 = strtok(NULL, delim);
			if (argument1 == NULL) {
				printf("File name required.\n");
				continue;
			}
			load(argument1);
		}

		else if (strcmp(command, "add") == 0) {
			argument1 = strtok(NULL, delim);
			argument2 = strtok(NULL, delim);
			if (argument1 == NULL || argument2 == NULL) {
				printf("Invalid arguments.\n");
				continue;
			}
			add(argument1, argument2);
			printf("%s was added suceessfully.\n", argument1);
		}

		else if (strcmp(command, "find") == 0) {
			argument1 = strtok(NULL, delim);
			if (argument1 == NULL) {
				printf("Invalid arguments.\n");
				continue;
			}
			find(argument1);
		}
		else if (strcmp(command, "status") == 0)
			status();
		else if (strcmp(command, "delete") == 0) {
			argument1 = strtok(NULL, delim);
			if (argument1 == NULL) {
				printf("Invalid arguments.\n");
				continue;
			}
			remove(argument1);
		}
		else if (strcmp(command, "save") == 0) {
			argument1 = strtok(NULL, delim);
			argument2 = strtok(NULL, delim);
			if (argument1 == NULL || strcmp("as", argument1) != 0 || argument2 == NULL) {
				printf("Invalid command format.\n");
				continue;
			}
			save(argument2);
		}
		else if (strcmp(command, "exit") == 0)
			break;
	}
}


void add(char * name, char * number) {
	if (n >= capacity) // capacity : 현재 배열의 크기
		reallocate(); // 배열이 꽉 찬 경우 재할당한다.

	int i = n - 1;

	// 알파벳순으로 정렬
	while (i >= 0 && strcmp(names[i], name) > 0) {
		names[i + 1] = names[i];
		numbers[i + 1] = numbers[i];
		i--;
	}

	// 뒤로 이동시키고, 그 중간에 삽입
	names[i + 1] = strdup(name);
	numbers[i + 1] = strdup(number);
	n++;
	// name, number은 지역변수이기 때문에 그냥 넣으면 안되고 strdup로 복제해서 넣어야함
	// names와 numbers는 전역변수이기 때문이다 !!!!!
}

void find(char * name) {

	int index = search(name);
	if (index == -1)
		printf("No person named '%s' exists.\n", name);
	else
		printf("%s\n", numbers[index]);
}


void status() {
	int i;
	for (i = 0; i < n; i++)
		printf("%s	%s\n", names[i], numbers[i]);
	printf("Total %d persons/ \n", n);
}

void remove(char *name) {

	int index = search(name); /* returns -1 if not exists */
	if (index == -1) {
		printf("No person named '%s' exists. \n", name);
		return;
	}
	int j = index;
	for (; j < n - 1; j++) { // n-1보다 작은 이유는 j+1 떄문이다. 중요 !!!!!!!!!
		names[j] = names[j + 1];
		numbers[j] = numbers[j + 1];
	}
	n--;
}

void load(char *fileName) {
	char buf1[BUFFER_SIZE];
	char buf2[BUFFER_SIZE];

	FILE *fp = fopen(fileName, "r");
	if (fp == NULL) { // 파일을 여는데 실패한 것
		printf("Open failed.\n");
		return;
	}

	// 파일 포인터, 포맷스트링, 진짜 읽어올 변수
	while ((fscanf(fp, "%s", buf1) != EOF)) { //이름 읽음
		fscanf(fp, "%s", buf2); //전화번호 읽음
		add(buf1, buf2); // names, numbers 배열에 추가하는 일을 add 에서 !!
	}
	fclose(fp);
}

void save(char *fileName) {
	int i;
	char tmp[BUFFER_SIZE];

	FILE *fp = fopen(fileName, "w");
	if (fp == NULL) {
		printf("Open failed.\n");
		return;
		// 원래는 없으면 만들어줌
	}
	for (i = 0; i < n; i++) {
		fprintf(fp, "%s %s\n", names[i], numbers[i]);
	}
	fclose(fp);
}

int search(char *name) {
	int i;
	for (i = 0; i < n; i++) {
		if (strcmp(name, names[i]) == 0) {
			return i;
		}
	}
	return -1;
}

void reallocate() { // 더 큰 배열을 할당 받아서 원래 있던 배열은 버리고 새로 만든 배열을 씀
	int i;

	capacity *= 2;
	char **tmp1 = (char **)malloc(capacity * sizeof(char *));
	char **tmp2 = (char **)malloc(capacity * sizeof(char *));

	for (i = 0; i < n; i++) {
		tmp1[i] = names[i];
		tmp2[i] = numbers[i];
	}

	// free : 할당해줬던 공간이 이제는 필요없으니 다시 가져가라는 의미
	// 다시 되돌려줌 !!!
	// free 시켜주지 않더라도 오류는 아니지만, garbage로 안 쓰는 배열이 남아버리게 되기 때문에 효율적인 코드는 아니다. 
	free(names);
	free(numbers);

	names = tmp1;
	numbers = tmp2;
	// tmp1 주소를 names에 넣는다. -> names,numbers가 새로운 배열을 가리키도록 한다.
	// 둘 다 포인터 변수이기에 가능 !!! 
}